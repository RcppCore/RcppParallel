
PKG_CXXFLAGS = @CXX11STD@

# If TBB_ROOT is defined, use it.
ifdef TBB_ROOT

	ifndef TBB_LIB
		TBB_LIB = $(TBB_ROOT)/lib
	endif

	ifndef TBB_INC
		TBB_INC = $(TBB_ROOT)/include
	endif

endif

# If TBB_LIB is not defined, try to use autodetection
ifndef TBB_LIB
	TBB_LIB = @TBB_LIB_AUTO@
	TBB_INC = @TBB_INC_AUTO@
endif

# If TBB_LIB is defined but TBB_INC is not, make a guess.
ifdef TBB_LIB
	ifndef TBB_INC
		TBB_INC = $(TBB_LIB)/../include
	endif
endif

ifdef TBB_INC
	PKG_CPPFLAGS = -I../inst/include -I$(TBB_INC)
else
	PKG_CPPFLAGS = -I../inst/include
endif

ifdef TBB_LIB
	PKG_LIBS = -Wl,-L,"$(TBB_LIB)" -Wl,-rpath,"$(TBB_LIB)" -ltbb -ltbbmalloc
endif

ifeq ($(OS), Windows_NT)

	USE_TBB=Windows
	TBB_COPY_PATTERN=tbb*.dll

	MAKE = make
	MAKEFLAGS = -e -j1
	MAKE_CMD =                                    \
		MSYS2_ARG_CONV_EXCL="*"                   \
		CYGWIN=nodosfilewarning                   \
		CONLY="@WINDOWS_CC@"                      \
		CPLUS="@WINDOWS_CXX11@"                   \
		CXXFLAGS="@CXX11FLAGS@ -DTBB_NO_LEGACY=1" \
		PIC_KEY="@CXX11PICFLAGS@"                 \
		WARNING_SUPPRESS=""                       \
		$(MAKE)

else

	UNAME := $(shell uname)
	TBB_COPY_PATTERN=libtbb*.*

	ifeq ($(UNAME), Darwin)
		USE_TBB=Mac
	endif

	ifeq ($(UNAME), Linux)
		USE_TBB=Linux
	endif

	ifeq ($(UNAME), SunOS)
		SUNOS_ARCH = $(shell uname -p)
		ifeq ($(SUNOS_ARCH), i386)
			USE_TBB=SunOS
		endif
	endif

	MAKEFLAGS += -e
	MAKE_CMD =                                     \
		CONLY="@CC@ $(PKG_CPPFLAGS) @CPPFLAGS@"    \
		CPLUS="@CXX11@ $(PKG_CPPFLAGS) @CPPFLAGS@" \
		CXXFLAGS="@CXX11FLAGS@ -DTBB_NO_LEGACY=1"  \
		PIC_KEY="@CXX11PICFLAGS@"                  \
		WARNING_SUPPRESS=""                        \
		$(MAKE)

endif

ifdef USE_TBB

PKG_CXXFLAGS += -DRCPP_PARALLEL_USE_TBB=1
PKG_CXXFLAGS += -DTBB_SUPPRESS_DEPRECATED_MESSAGES=1

MAKE_TARGETS = tbb_build_prefix=lib tbb_release tbbmalloc_release

ifeq ($(USE_TBB), Windows)

	# rtools: turn on hacks to compensate for make and shell differences rtools<=>MinGW
	# compiler: overwrite default (which is cl = MS compiler)
	MAKE_ARGS += rtools=true compiler=gcc
	ifeq ($(WIN), 64)
		MAKE_ARGS += arch=intel64 runtime=mingw
		ARCH_DIR=x64/
	else
		MAKE_ARGS += arch=ia32 runtime=mingw
		ARCH_DIR=i386/
	endif

	# Linker needs access to the tbb dll; otherwise you get errors such as:
	# "undefined reference to `tbb::task_scheduler_init::terminate()'"
	PKG_LIBS += -Ltbb/build/lib_release -ltbb -ltbbmalloc

endif

# write compiler if set
ifneq (@COMPILER@, )
	MAKE_ARGS += compiler=@COMPILER@
endif

# For Solaris detect if this is 32-bit R on x86 and if so forward that to TBB
ifeq ($(USE_TBB), SunOS)
	R_32BIT = $(shell ${R_HOME}/bin/Rscript -e 'cat(.Machine$$sizeof.pointer == 4)')
	ifeq ($(R_32BIT), TRUE)
		MAKE_ARGS += arch=ia32
	endif
endif

# Write compilation output to file, and log it if installation fails.
ifeq ($(VERBOSE), )
	MAKE_LOG = > tbb.log 2>&1 \
		&& echo "(tbb) TBB compilation finished successfully." \
		|| cat tbb.log; rm -f tbb.log
endif

.PHONY: all tbb tbb-clean

# Order is important in Windows' case. See PKG_LIBS above
all: tbb $(SHLIB)

# TBB needs to be built before our C++ sources are built, so that
# headers are copied and available from the expected locations.
$(OBJECTS): tbb

# NOTE: TBB libraries are installed via install.libs.R.
# However, we need to copy headers here so that they are visible during compilation.
tbb: tbb-clean
ifdef TBB_LIB
	@echo "(tbb) Using system (Intel / OneAPI) TBB library."
	@echo "(tbb) TBB_LIB = $(TBB_LIB)"
	@echo "(tbb) TBB_INC = $(TBB_INC)"
	@mkdir -p ../inst/include
	@cp -R $(TBB_INC)/oneapi ../inst/include/ 2> /dev/null || :
	@cp -R $(TBB_INC)/serial ../inst/include/ 2> /dev/null || :
	@cp -R $(TBB_INC)/tbb    ../inst/include/ 2> /dev/null || :
else
	@echo "(tbb) Building TBB using bundled sources ..."
	@mkdir -p ../inst/include
	@cp -R tbb/include/* ../inst/include/
	@(cd tbb/src && $(MAKE_CMD) $(MAKE_ARGS) info)
	@(cd tbb/src && $(MAKE_CMD) @STDVER@ $(MAKE_ARGS) $(MAKE_TARGETS) $(MAKE_LOG))
endif

# NOTE: we do not want to clean ../inst/lib or ../inst/libs here,
# as we may be writing to those locations in multiarch builds
tbb-clean:
	@rm -rf ../inst/include/tbb
	@rm -rf ../inst/include/oneapi
	@rm -rf ../inst/include/tbb_local
	@rm -rf ../inst/include/serial

clean: tbb-clean
ifdef TBB_LIB
	@echo "Nothing to clean for TBB."
else
	@(cd tbb/src; make clean)
endif


endif
